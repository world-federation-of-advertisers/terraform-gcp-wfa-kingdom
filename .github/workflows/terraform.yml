# Copyright 2023 The Cross-Media Measurement Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform_kingdom'

on:
  push:
    branches: [ "main" ]
  pull_request:

env:
  GCP_CREDENTIALS: '${{ secrets.GCP_CREDENTIALS }}'
  ROOT_PATH: '${{ github.workspace }}/terraform'

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: 'Setting up GCP account Connection'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ env.GCP_CREDENTIALS }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'

      # Echo "Halo world"
      - name: print greetings
        run: echo "Halo world"

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run:  terraform init -backend-config=state-lock-config-qa.properties -reconfigure
        working-directory: ${{env.ROOT_PATH}}

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Validates the Terraform Code.
      - name: Terraform Validate
        run: terraform validate

      # Creates a plan
      - name: Terraform Plan
        run: terraform plan '-out=qa_tfplan'
        working-directory: ${{env.ROOT_PATH}}

      # Applies the above created plan
      - name: Terraform Apply
        run: terraform apply qa_tfplan
        working-directory: ${{env.ROOT_PATH}}

      # Applies the above created plan
      - name: Log in to GCR
        run: echo "${{ secrets.GCP_CREDENTIALS }}"

      # Clone the repositories
      - name: Clone repositories
        run: |
          cd /tmp
          echo "Cloning the cross-media-measurement repository"
          git clone -b main https://github.com/world-federation-of-advertisers/cross-media-measurement.git
          cd cross-media-measurement
          echo "Cloning the terraform-gcp-wfa-kingdom repository"
          git clone -b main https://github.com/world-federation-of-advertisers/terraform-gcp-wfa-kingdom.git

      # Build the image
      - name: Build Bazel image
        working-directory: /tmp/cross-media-measurement
        run: |
          mkdir -p src/main/docker
          bazel query 'filter("push_kingdom", kind("container_push", //src/main/docker:all))' |
          xargs bazel build -c opt --define container_registry=gcr.io \
          --define image_repo_prefix=halo-kingdom-demo --define image_tag=build-0001


      # Push the image
      #  - name: Push Bazel image
      #  run: bazel query 'filter("push_kingdom", kind("container_push", //src/main/docker:all))' |
      #        xargs -n 1 bazel run -c opt --define container_registry=gcr.io \
      #        --define image_repo_prefix=halo-kingdom-demo --define image_tag=build-0001
